"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const MessageHandler_1 = require("../../lib/MessageHandler");
const MultifileHelper_1 = require("../MultifileHelper");
(0, vitest_1.test)('type name completion', () => __awaiter(void 0, void 0, void 0, function* () {
    const helper = yield (0, MultifileHelper_1.getMultifileHelper)('complete-field');
    const post = helper.file('Post.prisma');
    const response = (0, MessageHandler_1.handleCompletionRequest)(helper.schema, post.textDocument, {
        textDocument: {
            uri: post.uri,
        },
        position: post.lineContaining('author Us').characterAfter('U'),
    });
    const userItem = response === null || response === void 0 ? void 0 : response.items.find((item) => item.label === 'User');
    (0, vitest_1.expect)(userItem).not.toBeUndefined();
}));
(0, vitest_1.test)('type name completion with no name typed', () => __awaiter(void 0, void 0, void 0, function* () {
    const helper = yield (0, MultifileHelper_1.getMultifileHelper)('complete-field');
    const post = helper.file('Post.prisma');
    const response = (0, MessageHandler_1.handleCompletionRequest)(helper.schema, post.textDocument, {
        textDocument: {
            uri: post.uri,
        },
        position: post.lineContaining('author ').characterAfter('r '),
    });
    const userItem = response === null || response === void 0 ? void 0 : response.items.find((item) => item.label === 'User');
    (0, vitest_1.expect)(userItem).not.toBeUndefined();
}));
(0, vitest_1.test)('native type complete', () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const helper = yield (0, MultifileHelper_1.getMultifileHelper)('complete-native-type');
    const post = helper.file('Post.prisma');
    const response = (0, MessageHandler_1.handleCompletionRequest)(helper.schema, post.textDocument, {
        textDocument: {
            uri: post.uri,
        },
        position: post.lineContaining('Decimal').characterAfter('@db'),
    });
    (0, vitest_1.expect)((_a = response === null || response === void 0 ? void 0 : response.items) === null || _a === void 0 ? void 0 : _a.map((item) => item.label)).toMatchInlineSnapshot(`
    [
      "Decimal()",
      "Money",
    ]
  `);
}));
//# sourceMappingURL=multi-file.test.js.map