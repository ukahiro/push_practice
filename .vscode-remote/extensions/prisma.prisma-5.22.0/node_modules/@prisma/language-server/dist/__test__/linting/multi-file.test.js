"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const MessageHandler_1 = require("../../lib/MessageHandler");
const MultifileHelper_1 = require("../MultifileHelper");
(0, vitest_1.test)('invalid doc', () => __awaiter(void 0, void 0, void 0, function* () {
    const helper = yield (0, MultifileHelper_1.getMultifileHelper)('linting');
    const response = (0, MessageHandler_1.handleDiagnosticsRequest)(helper.schema);
    (0, vitest_1.expect)(response).toMatchInlineSnapshot(`
    DiagnosticMap {
      "_map": Map {
        "file:///linting/Post.prisma" => [
          {
            "message": "Type "Like" is neither a built-in type, nor refers to another model, composite type, or enum.",
            "range": {
              "end": {
                "character": 17,
                "line": 7,
              },
              "start": {
                "character": 13,
                "line": 7,
              },
            },
            "severity": 1,
            "source": "Prisma",
          },
        ],
        "file:///linting/User.prisma" => [],
        "file:///linting/config.prisma" => [],
      },
    }
  `);
}));
//# sourceMappingURL=multi-file.test.js.map