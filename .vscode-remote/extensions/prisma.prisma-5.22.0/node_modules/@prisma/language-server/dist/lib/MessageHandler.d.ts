import { DocumentFormattingParams, TextEdit, DeclarationParams, CompletionParams, CompletionList, CompletionItem, HoverParams, Hover, CodeActionParams, CodeAction, RenameParams, WorkspaceEdit, DocumentSymbolParams, DocumentSymbol, LocationLink, ReferenceParams, Location } from 'vscode-languageserver';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import { PrismaSchema } from './Schema';
import { DiagnosticMap } from './DiagnosticMap';
export declare function handleDiagnosticsRequest(schema: PrismaSchema, onError?: (errorMessage: string) => void): DiagnosticMap;
/**
 * @todo Use official schema.prisma parser. This is a workaround!
 */
export declare function handleDefinitionRequest(schema: PrismaSchema, initiatingDocument: TextDocument, params: DeclarationParams): LocationLink[] | undefined;
/**
 * This handler provides the modification to the document to be formatted.
 */
export declare function handleDocumentFormatting(schema: PrismaSchema, initiatingDocument: TextDocument, params: DocumentFormattingParams, onError?: (errorMessage: string) => void): TextEdit[];
export declare function handleHoverRequest(schema: PrismaSchema, initiatingDocument: TextDocument, params: HoverParams, onError?: (errorMessage: string) => void): Hover | undefined;
/**
 *
 * This handler provides the initial list of the completion items.
 */
export declare function handleCompletionRequest(schema: PrismaSchema, document: TextDocument, params: CompletionParams, onError?: (errorMessage: string) => void): CompletionList | undefined;
export declare function handleReferencesRequest(schema: PrismaSchema, params: ReferenceParams, onError?: (errorMessage: string) => void): Location[] | undefined;
export declare function handleRenameRequest(schema: PrismaSchema, initiatingDocument: TextDocument, params: RenameParams): WorkspaceEdit | undefined;
/**
 *
 * @param item This handler resolves additional information for the item selected in the completion list.
 */
export declare function handleCompletionResolveRequest(item: CompletionItem): CompletionItem;
export declare function handleCodeActions(schema: PrismaSchema, initiatingDocument: TextDocument, params: CodeActionParams, onError?: (errorMessage: string) => void): CodeAction[];
export declare function handleDocumentSymbol(params: DocumentSymbolParams, document: TextDocument): DocumentSymbol[];
