"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismaSchema = exports.SchemaDocument = void 0;
const schema_files_loader_1 = require("@prisma/schema-files-loader");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode_uri_1 = require("vscode-uri");
const ast_1 = require("./ast");
class SchemaDocument {
    constructor(textDocument) {
        this.textDocument = textDocument;
        this.lines = [];
        for (let i = 0; i < textDocument.lineCount; i++) {
            const line = (0, ast_1.getCurrentLine)(textDocument, i);
            this.lines.push({
                document: this,
                lineIndex: i,
                untrimmedText: line,
                text: line.trim(),
            });
        }
    }
    get uri() {
        return this.textDocument.uri;
    }
    get content() {
        return this.textDocument.getText();
    }
    positionAt(offset) {
        return this.textDocument.positionAt(offset);
    }
    getLineContent(lineIndex) {
        return this.lines[lineIndex].text;
    }
}
exports.SchemaDocument = SchemaDocument;
class PrismaSchema {
    static singleFile(textDocument) {
        return new PrismaSchema([new SchemaDocument(textDocument)]);
    }
    static load(currentDocument, allDocuments) {
        return __awaiter(this, void 0, void 0, function* () {
            const schemaFiles = yield (0, schema_files_loader_1.loadRelatedSchemaFiles)(vscode_uri_1.URI.parse(currentDocument.uri).fsPath, createFilesResolver(allDocuments));
            const documents = schemaFiles.map(([filePath, content]) => {
                return new SchemaDocument(vscode_languageserver_textdocument_1.TextDocument.create(vscode_uri_1.URI.file(filePath).toString(), 'prisma', 1, content));
            });
            return new PrismaSchema(documents);
        });
    }
    constructor(documents) {
        this.documents = documents;
    }
    *iterLines() {
        for (const doc of this.documents) {
            for (const line of doc.lines) {
                yield line;
            }
        }
    }
    linesAsArray() {
        return Array.from(this.iterLines());
    }
    findDocByUri(fileUri) {
        return this.documents.find((doc) => doc.uri === fileUri);
    }
    findWithRegex(regexp) {
        for (const doc of this.documents) {
            regexp.lastIndex = 0;
            const match = regexp.exec(doc.content);
            if (match) {
                return { match, documentUri: doc.uri };
            }
        }
        return undefined;
    }
    /**
     *
     * @returns array of (uri, content) tuples. Expected input for prisma-schema-wasm
     */
    toTuples() {
        return this.documents.map((doc) => [doc.uri, doc.content]);
    }
    toJSON() {
        return this.toTuples();
    }
}
exports.PrismaSchema = PrismaSchema;
function createFilesResolver(allDocuments) {
    const options = {
        // Technically, macos and Windows can use case-sensitive file systems
        // too, however, VSCode does not support this at the moment, so there is
        // no meaningful way for us to support them in extension
        // See:
        // - https://github.com/microsoft/vscode/issues/123660
        // - https://github.com/microsoft/vscode/issues/94307
        // - https://github.com/microsoft/vscode/blob/c06c555b481aaac4afd51d6fc7691d7658949651/src/vs/platform/files/node/diskFileSystemProvider.ts#L81
        caseSensitive: process.platform === 'linux',
    };
    return new schema_files_loader_1.CompositeFilesResolver(createInMemoryResolver(allDocuments, options), schema_files_loader_1.realFsResolver, options);
}
function createInMemoryResolver(allDocuments, options) {
    const resolver = new schema_files_loader_1.InMemoryFilesResolver(options);
    for (const doc of allDocuments.all()) {
        const filePath = vscode_uri_1.URI.parse(doc.uri).fsPath;
        const content = doc.getText();
        resolver.addFile(filePath, content);
    }
    return resolver;
}
//# sourceMappingURL=Schema.js.map